name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  GODOT_VERSION: "4.4-stable"

jobs:
  rust:
    name: Build Rust (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extension: .so
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: .dylib
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .dll

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Build workspace (debug)
      run: cargo build --verbose

    - name: Build workspace (release)
      run: cargo build --release --verbose

    - name: Build example project
      run: cargo build --release --manifest-path examples/dodge-the-creeps-2d/rust/Cargo.toml

    - name: Debug built files (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "Contents of target/release after build:"
        Get-ChildItem target/release -ErrorAction SilentlyContinue
        Write-Host "Looking for .dll files:"
        Get-ChildItem target/release -Filter "*.dll" -ErrorAction SilentlyContinue
        Write-Host "Looking for any rust files:"
        Get-ChildItem target/release -Filter "*rust*" -ErrorAction SilentlyContinue

    - name: Debug built files (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Contents of target/release after build:"
        ls -la target/release/ || true
        echo "Looking for rust library files:"
        ls -la target/release/*rust* || true

    - name: Upload Rust artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-libs-${{ matrix.os }}
        path: |
          target/release/*rust${{ matrix.extension }}
          target/release/deps/*rust*${{ matrix.extension }}
        if-no-files-found: error

  godot:
    name: Build Godot Project (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: rust
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            godot-binary: "Godot_v4.4-stable_linux.x86_64"
            godot-template: "linux_release.x86_64"
            export-name: "dodge-the-creeps-2d-linux"
          - os: macos-latest
            godot-binary: "Godot.app"
            godot-template: "macos_release.zip"
            export-name: "dodge-the-creeps-2d-macos"
          - os: windows-latest
            godot-binary: "Godot_v4.4-stable_win64.exe"
            godot-template: "windows_release_x86_64.exe"
            export-name: "dodge-the-creeps-2d-windows"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Rust artifacts
      uses: actions/download-artifact@v4
      with:
        name: rust-libs-${{ matrix.os }}
        path: target/release/

    - name: Debug downloaded artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "=== ARTIFACT DOWNLOAD DEBUG ==="
        Write-Host "Current working directory:"
        Get-Location
        Write-Host "Contents of entire workspace:"
        Get-ChildItem -Recurse | Select-Object -First 20
        Write-Host "Contents of target directory:"
        Get-ChildItem target -Recurse -ErrorAction SilentlyContinue
        Write-Host "Looking for .dll files anywhere:"
        Get-ChildItem -Recurse -Filter "*.dll" -ErrorAction SilentlyContinue
        Write-Host "Looking for any rust files anywhere:"
        Get-ChildItem -Recurse -Filter "*rust*" -ErrorAction SilentlyContinue

    - name: Setup library paths for CI (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        # Debug: Show what files we downloaded
        echo "Files in target/release:"
        ls -la target/release/ || true
        # Create debug directory and copy release libraries
        mkdir -p target/debug
        cp target/release/*rust* target/debug/ || true
        # Ensure library files have correct permissions
        chmod +x target/release/*rust* || true
        chmod +x target/debug/*rust* || true
        echo "Files in target/debug:"
        ls -la target/debug/ || true

    - name: Setup library paths for CI (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Debug: Show what files we downloaded
        Write-Host "Files in target/release:"
        Get-ChildItem target/release/ -ErrorAction SilentlyContinue
        # Create debug directory and copy release libraries
        New-Item -ItemType Directory -Force -Path target/debug
        Copy-Item target/release/*rust* target/debug/ -ErrorAction SilentlyContinue
        Write-Host "Files in target/debug:"
        Get-ChildItem target/debug/ -ErrorAction SilentlyContinue

    - name: Cache Godot binary
      id: cache-godot
      uses: actions/cache@v4
      with:
        path: godot-binary/
        key: godot-${{ env.GODOT_VERSION }}-${{ matrix.os }}

    - name: Download Godot (Linux)
      if: matrix.os == 'ubuntu-latest' && steps.cache-godot.outputs.cache-hit != 'true'
      run: |
        mkdir -p godot-binary
        cd godot-binary
        wget https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_linux.x86_64.zip
        unzip Godot_v${{ env.GODOT_VERSION }}_linux.x86_64.zip
        chmod +x ${{ matrix.godot-binary }}

    - name: Download Godot (macOS)
      if: matrix.os == 'macos-latest' && steps.cache-godot.outputs.cache-hit != 'true'
      run: |
        mkdir -p godot-binary
        cd godot-binary
        wget https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_macos.universal.zip
        unzip Godot_v${{ env.GODOT_VERSION }}_macos.universal.zip

    - name: Download Godot (Windows)
      if: matrix.os == 'windows-latest' && steps.cache-godot.outputs.cache-hit != 'true'
      run: |
        mkdir godot-binary
        cd godot-binary
        curl -L -o godot.zip https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_win64.exe.zip
        powershell -command "Expand-Archive godot.zip ."

    - name: Download Godot Export Templates (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create directory with the exact name Godot expects
        mkdir -p ~/.local/share/godot/export_templates/4.4.stable
        cd ~/.local/share/godot/export_templates/4.4.stable
        curl -L -o templates.zip https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_export_templates.tpz
        unzip templates.zip
        mv templates/* .
        echo "Export templates directory contents:"
        ls -la

    - name: Download Godot Export Templates (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Create directory with the exact name Godot expects (Windows uses %APPDATA%)
        $templatesPath = "$env:APPDATA\Godot\export_templates\4.4.stable"
        New-Item -ItemType Directory -Force -Path $templatesPath
        Set-Location $templatesPath
        curl -L -o templates.zip https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_export_templates.tpz
        powershell -command "Expand-Archive templates.zip ."
        Move-Item templates/* . -Force
        Write-Host "Export templates directory contents:"
        Get-ChildItem

    - name: Download Godot Export Templates (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Create directory with the exact name Godot expects
        mkdir -p ~/Library/Application\ Support/Godot/export_templates/4.4.stable
        cd ~/Library/Application\ Support/Godot/export_templates/4.4.stable
        curl -L -o templates.zip https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_export_templates.tpz
        unzip templates.zip
        mv templates/* .
        echo "Export templates directory contents:"
        ls -la

    - name: Setup Godot path (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "GODOT_PATH=$(pwd)/godot-binary/${{ matrix.godot-binary }}" >> $GITHUB_ENV

    - name: Setup Godot path (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "GODOT_PATH=$(pwd)/godot-binary/${{ matrix.godot-binary }}" >> $env:GITHUB_ENV

    - name: Import Godot project (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd examples/dodge-the-creeps-2d/godot
        ${{ env.GODOT_PATH }} --headless --import --quit-after 10

    - name: Import Godot project (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Set-Location examples/dodge-the-creeps-2d/godot
        & "${{ env.GODOT_PATH }}" --headless --import --quit-after 10

    - name: Configure project settings for macOS
      if: matrix.os == 'macos-latest'
      run: |
        cd examples/dodge-the-creeps-2d/godot
        # Add ETC2 ASTC support to project settings
        if ! grep -q "import_etc2_astc" project.godot; then
          echo "" >> project.godot
          echo "[rendering]" >> project.godot
          echo "" >> project.godot
          echo "textures/vram_compression/import_etc2_astc=true" >> project.godot
        fi

    - name: Import Godot project (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd examples/dodge-the-creeps-2d/godot
        ${{ env.GODOT_PATH }}/Contents/MacOS/Godot --headless --import --quit-after 10

    - name: Export Godot project (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd examples/dodge-the-creeps-2d/godot
        mkdir -p exports
        ${{ env.GODOT_PATH }} --headless --export-release "Linux/X11" exports/${{ matrix.export-name }}

    - name: Export Godot project (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd examples/dodge-the-creeps-2d/godot
        mkdir -p exports
        ${{ env.GODOT_PATH }}/Contents/MacOS/Godot --headless --export-release "macOS" exports/${{ matrix.export-name }}.app

    - name: Export Godot project (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Set-Location examples/dodge-the-creeps-2d/godot
        New-Item -ItemType Directory -Force -Path exports
        
        # Debug: Show current directory and files
        Write-Host "Current directory contents:"
        Get-ChildItem
        
        # Debug: Check if export preset exists
        Write-Host "Export presets content:"
        Get-Content export_presets.cfg | Select-String -Pattern "name=" -Context 1
        
        # Debug: Check Godot path and version
        Write-Host "Godot path: ${{ env.GODOT_PATH }}"
        & "${{ env.GODOT_PATH }}" --version
        
        # Debug: Check if Rust libraries are available
        Write-Host "Rust libraries in target/release:"
        Get-ChildItem ../../../target/release/*rust* -ErrorAction SilentlyContinue
        Write-Host "Rust libraries in target/debug:"
        Get-ChildItem ../../../target/debug/*rust* -ErrorAction SilentlyContinue
        
        # Debug: List available export templates
        Write-Host "Available export templates:"
        Get-ChildItem "$env:APPDATA\Godot\export_templates\4.4.stable" -ErrorAction SilentlyContinue
        
        # Check specifically for Windows templates
        Write-Host "Windows-specific export templates:"
        Get-ChildItem "$env:APPDATA\Godot\export_templates\4.4.stable\windows_*" -ErrorAction SilentlyContinue
        
        # Export templates are installed, proceeding with export
        
        # Run the export with more verbose output
        Write-Host "Running export command..."
        Write-Host "Command: ${{ env.GODOT_PATH }} --headless --export-release `"Windows Desktop`" exports/${{ matrix.export-name }}.exe"
        Write-Host "Working directory: $(Get-Location)"
        
        # Skip the problematic validation and focus on the core export
        Write-Host "Skipping template validation due to hanging issue"
        
        # Try a simple export first
        Write-Host "Attempting basic Windows export:"
        try {
            $exportResult = & "${{ env.GODOT_PATH }}" --headless --export-release "Windows Desktop" "exports/${{ matrix.export-name }}.exe" 2>&1
            Write-Host "Export completed with exit code: $LASTEXITCODE"
            if ($exportResult) {
                Write-Host "Export output:"
                $exportResult | ForEach-Object { Write-Host $_ }
            }
        } catch {
            Write-Host "Export failed with exception: $_"
        }
        
        # Check what was actually created
        Write-Host "Contents of exports directory after export attempt:"
        Get-ChildItem exports -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  $($_.Name) - $($_.Length) bytes"
        }
        
        # Check if any files were created in the current directory by mistake
        Write-Host "Checking for any .exe files in current directory:"
        Get-ChildItem *.exe -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  Found: $($_.Name) - $($_.Length) bytes"
        }
        
        # Debug: Show what files were created
        Write-Host "Files in exports directory after export:"
        Get-ChildItem exports -ErrorAction SilentlyContinue

    - name: Upload Godot artifacts
      uses: actions/upload-artifact@v4
      with:
        name: godot-export-${{ matrix.os }}
        path: examples/dodge-the-creeps-2d/godot/exports/
        if-no-files-found: error

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [rust, godot]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 