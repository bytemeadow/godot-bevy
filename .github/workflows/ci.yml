name: ci

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  GODOT_VERSION: "4.4.1"
  # Examples to export for cross-platform testing
  EXAMPLES_TO_EXPORT: '["dodge-the-creeps-2d", "platformer-2d"]'
  # Examples to benchmark for performance testing
  EXAMPLES_TO_BENCHMARK: '["boids-perf-test"]'
  # All examples (for comprehensive build testing)
  ALL_EXAMPLES: '["dodge-the-creeps-2d", "platformer-2d", "boids-perf-test", "avian-physics-demo", "input-event-demo", "simple-node2d-movement", "timing-test", "two-way-sync-demo"]'

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Cache and install Linux dependencies
        if: runner.os == 'linux'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libasound2-dev libudev-dev pkg-config
          version: 1.0

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --package godot-bevy --package godot-bevy-macros

  examples:
    name: test / ${{ matrix.example }}
    runs-on: ${{ matrix.runner || matrix.os }}
    needs: [check]
    env:
      # Disable debug symbols in release builds to save disk space
      CARGO_PROFILE_RELEASE_DEBUG: false
    strategy:
      matrix:
        example:
          [
            "dodge-the-creeps-2d",
            "platformer-2d",
            "boids-perf-test",
            "avian-physics-demo",
            "input-event-demo",
            "simple-node2d-movement",
            "timing-test",
            "two-way-sync-demo",
          ]
        os: [ubuntu-latest, macos-15, windows-latest]
        include:
          # Use high-performance runner for boids-perf-test benchmarking on Linux
          - example: boids-perf-test
            os: ubuntu-latest
            runner: blaze/compute/ubuntu-latest-amd64
        exclude:
          # Remove default ubuntu-latest for boids-perf-test (replaced by high-perf runner)
          - example: boids-perf-test
            os: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target
            examples/*/rust -> target

      - name: Cache and install Linux dependencies
        if: runner.os == 'linux'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libasound2-dev libudev-dev pkg-config
          version: 1.0

      - name: Build example
        run: |
          echo "Building example: ${{ matrix.example }}"
          cargo build --release --manifest-path examples/${{ matrix.example }}/rust/Cargo.toml

      # Export step (only for examples in EXAMPLES_TO_EXPORT)
      - name: Setup Godot for export
        if: contains(fromJson(env.EXAMPLES_TO_EXPORT), matrix.example)
        uses: CapsCollective/godot-actions/install-godot@v1.2
        with:
          godot-version: ${{ env.GODOT_VERSION }}
          install-templates: true
        id: install-godot

      - name: Cache Godot imports for export
        if: contains(fromJson(env.EXAMPLES_TO_EXPORT), matrix.example)
        uses: actions/cache@v4
        with:
          path: examples/${{ matrix.example }}/godot/.godot
          key: ${{ runner.os }}-godot-imports-${{ matrix.example }}-${{ hashFiles(format('examples/{0}/godot/**/*.import', matrix.example)) }}
          restore-keys: |
            ${{ runner.os }}-godot-imports-${{ matrix.example }}-

      - name: Import and export Godot project
        if: contains(fromJson(env.EXAMPLES_TO_EXPORT), matrix.example)
        working-directory: examples/${{ matrix.example }}/godot
        run: |
          # Import project
          ${{ steps.install-godot.outputs.godot-executable }} --editor --headless --quit || true

          # Export for current platform
          mkdir -p exports
          case "${{ runner.os }}" in
            "Linux")
              ${{ steps.install-godot.outputs.godot-executable }} --headless --export-release "Linux/X11" exports/${{ matrix.example }}-linux
              ;;
            "macOS")
              ${{ steps.install-godot.outputs.godot-executable }} --headless --export-release "macOS" exports/${{ matrix.example }}-macos.app
              ;;
            "Windows")
              ${{ steps.install-godot.outputs.godot-executable }} --headless --export-release "Windows Desktop" exports/${{ matrix.example }}-windows.exe
              ;;
          esac

      - name: Upload game exports
        if: contains(fromJson(env.EXAMPLES_TO_EXPORT), matrix.example)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.example }}-export-${{ runner.os }}
          path: examples/${{ matrix.example }}/godot/exports/
          if-no-files-found: error

      # Benchmark steps (only for examples in EXAMPLES_TO_BENCHMARK and on Linux)
      - name: Cache Godot imports for benchmarking
        if: contains(fromJson(env.EXAMPLES_TO_BENCHMARK), matrix.example) && runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: examples/${{ matrix.example }}/godot/.godot
          key: ${{ runner.os }}-godot-imports-${{ matrix.example }}-${{ hashFiles(format('examples/{0}/godot/**/*.import', matrix.example)) }}
          restore-keys: |
            ${{ runner.os }}-godot-imports-${{ matrix.example }}-

      - name: Run benchmark
        if: contains(fromJson(env.EXAMPLES_TO_BENCHMARK), matrix.example) && runner.os == 'Linux'
        working-directory: examples/${{ matrix.example }}
        run: |
          # Import project
          $GODOT_EXECUTABLE --editor --headless --quit || true

          # Run benchmark
          python3 regression_test.py --boids 500 1000 2000 5000 10000 20000 --godot "$GODOT_EXECUTABLE"

      - name: Upload benchmark results
        if: contains(fromJson(env.EXAMPLES_TO_BENCHMARK), matrix.example) && runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.example }}-benchmark-results
          path: |
            examples/${{ matrix.example }}/benchmark_results/
            examples/${{ matrix.example }}/benchmark_output.txt
