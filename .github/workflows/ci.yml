name: ci

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  GODOT_VERSION: "4.3"

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rust:
    name: build / rust (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          [
            blaze/compute/ubuntu-latest-amd64,
            blaze/macos-latest,
            windows-latest,
          ]
        include:
          - os: blaze/compute/ubuntu-latest-amd64
            platform: linux
            target: x86_64-unknown-linux-gnu
            extension: .so
          - os: blaze/macos-latest
            platform: macos
            target: x86_64-apple-darwin
            extension: .dylib
          - os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
            extension: .dll

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Install Linux dependencies
        if: runner.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libudev-dev pkg-config

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test

      - name: Build release
        run: cargo build --release

      - name: Upload Rust libraries
        uses: actions/upload-artifact@v4
        with:
          name: rust-libs-${{ runner.os }}
          path: |
            target/release/*rust${{ matrix.extension }}
            target/release/deps/*rust*${{ matrix.extension }}
          if-no-files-found: error

  changes:
    name: detect changes
    runs-on: ubuntu-latest
    outputs:
      benchmark: ${{ steps.filter.outputs.benchmark }}
      dodge-the-creeps-2d: ${{ steps.filter.outputs.dodge-the-creeps-2d }}
      platformer-2d: ${{ steps.filter.outputs.platformer-2d }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            benchmark:
              - 'godot-bevy/**'
              - 'godot-bevy-macros/**'
              - 'examples/boids-perf-test/**'
              - '.github/workflows/ci.yml'
              - 'Cargo.toml'
              - 'Cargo.lock'
            dodge-the-creeps-2d:
              - 'godot-bevy/**'
              - 'godot-bevy-macros/**'
              - 'examples/dodge-the-creeps-2d/**'
              - '.github/workflows/ci.yml'
              - 'Cargo.toml'
              - 'Cargo.lock'
            platformer-2d:
              - 'godot-bevy/**'
              - 'godot-bevy-macros/**'
              - 'examples/platformer-2d/**'
              - '.github/workflows/ci.yml'
              - 'Cargo.toml'
              - 'Cargo.lock'

  examples:
    name: build / ${{ matrix.example }}
    runs-on: blaze/macos-latest
    needs: [rust, changes]
    if: |
      needs.changes.outputs.dodge-the-creeps-2d == 'true' ||
      needs.changes.outputs.platformer-2d == 'true'
    strategy:
      matrix:
        example: ${{ fromJson(needs.changes.outputs.dodge-the-creeps-2d == 'true' && needs.changes.outputs.platformer-2d == 'true' && '["dodge-the-creeps-2d", "platformer-2d"]' || needs.changes.outputs.dodge-the-creeps-2d == 'true' && '["dodge-the-creeps-2d"]' || '["platformer-2d"]') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Godot
        uses: CapsCollective/godot-actions/install-godot@v1.2
        with:
          godot-version: ${{ env.GODOT_VERSION }}
          install-templates: true
        id: install-godot

      - name: Download Rust libraries
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup cross-platform libraries
        run: |
          mkdir -p target/{release,debug}

          # Copy all platform libraries to target directories
          find artifacts/ -name "*rust*" -type f | while read file; do
            cp "$file" target/release/ 2>/dev/null || true
            cp "$file" target/debug/ 2>/dev/null || true
          done

          echo "Available libraries:"
          ls -la target/release/ || echo "No release libraries found"

      - name: Build example Rust library
        run: cargo build --release --manifest-path examples/${{ matrix.example }}/rust/Cargo.toml

      - name: Import Godot project
        working-directory: examples/${{ matrix.example }}/godot
        run: ${{ steps.install-godot.outputs.godot-executable }} --editor --headless --quit || true

      - name: Export for all platforms
        working-directory: examples/${{ matrix.example }}/godot
        run: |
          mkdir -p exports
          ${{ steps.install-godot.outputs.godot-executable }} --headless --export-release "Linux/X11" exports/${{ matrix.example }}-linux
          ${{ steps.install-godot.outputs.godot-executable }} --headless --export-release "Windows Desktop" exports/${{ matrix.example }}-windows.exe
          ${{ steps.install-godot.outputs.godot-executable }} --headless --export-release "macOS" exports/${{ matrix.example }}-macos.app

      - name: Upload game exports
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.example }}-exports
          path: examples/${{ matrix.example }}/godot/exports/
          if-no-files-found: error

  benchmark:
    name: performance / boids benchmark
    runs-on: blaze/compute/ubuntu-latest-amd64
    needs: [rust, changes]
    if: |
      (needs.changes.outputs.benchmark == 'true' ||
       contains(github.event.pull_request.labels.*.name, 'benchmark')) && (
        github.ref == 'refs/heads/main' ||
        github.event_name == 'pull_request'
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download Rust libraries
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup cross-platform libraries
        run: |
          mkdir -p target/{release,debug}

          # Copy all platform libraries to target directories
          find artifacts/ -name "*rust*" -type f | while read file; do
            cp "$file" target/release/ 2>/dev/null || true
            cp "$file" target/debug/ 2>/dev/null || true
          done

          echo "Available libraries:"
          ls -la target/release/ || echo "No release libraries found"

      - name: Install gdenv
        run: |
          # Install gdenv using official installer
          curl -fsSL https://gdenv.bytemeadow.com | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Godot via gdenv
        run: |
          # Install Godot 4.4.1 using gdenv
          gdenv install 4.4.1
          gdenv use 4.4.1

          # Add gdenv bin directory to PATH
          echo "$HOME/.local/share/gdenv/bin" >> $GITHUB_PATH

          # Set the executable path
          echo "GODOT_EXECUTABLE=$HOME/.local/share/gdenv/bin/godot" >> $GITHUB_ENV

          # Verify installation
          $HOME/.local/share/gdenv/bin/godot --version

      - name: Build boids benchmark
        run: cargo build --release --manifest-path examples/boids-perf-test/rust/Cargo.toml

      - name: Import Godot project
        working-directory: examples/boids-perf-test/godot
        run: $GODOT_EXECUTABLE --editor --headless --quit || true

      - name: Run performance benchmark
        id: benchmark
        working-directory: examples/boids-perf-test
        run: |
          # Run quick benchmark for CI
          if python3 regression_test.py --boids 500 1000 2000 5000 10000 20000 --godot "$GODOT_EXECUTABLE"; then
            echo "benchmark_success=true" >> $GITHUB_OUTPUT
          else
            echo "benchmark_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Check for regression
        if: github.event_name == 'pull_request' && steps.benchmark.outputs.benchmark_success == 'true'
        working-directory: examples/boids-perf-test
        run: |
          # Download baseline from main branch (only CI-generated baselines)
          if curl -f -o main-baseline.json https://raw.githubusercontent.com/${{ github.repository }}/main/examples/boids-perf-test/baseline.json; then
            # Check if this is a CI-generated baseline
            if jq -e '.ci_metadata' main-baseline.json > /dev/null; then
              echo "Found CI-generated baseline from commit $(jq -r '.ci_metadata.commit' main-baseline.json)"
              echo "Checking for performance regression against main branch..."
              python3 regression_test.py --boids 500 1000 2000 5000 10000 20000 --baseline main-baseline.json --threshold 0.85 --godot "$GODOT_EXECUTABLE" || {
                echo "::warning::Performance regression detected! Bevy implementation performance dropped more than 15%"
                exit 1
              }
            else
              echo "Baseline exists but was not generated by CI - skipping regression check"
              echo "Run the benchmark-baseline workflow to generate a CI baseline"
            fi
          else
            echo "No baseline found on main branch - regression check skipped"
            echo "Run the benchmark-baseline workflow to generate a CI baseline"
          fi

      - name: Generate benchmark summary
        if: always() && steps.benchmark.outputs.benchmark_success == 'true'
        working-directory: examples/boids-perf-test
        run: |
          # The regression_test.py already outputs the results, just add to job summary
          echo "## 🚀 Performance Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Quick CI benchmark completed successfully. Check the benchmark job logs for detailed results." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full results are available in the artifacts." >> $GITHUB_STEP_SUMMARY

      - name: Save PR metadata for comment workflow
        if: github.event_name == 'pull_request' && steps.benchmark.outputs.benchmark_success == 'true'
        run: |
          mkdir -p benchmark-artifacts
          echo "${{ github.event.number }}" > benchmark-artifacts/pr_number.txt
          echo "${{ github.event.pull_request.head.sha }}" > benchmark-artifacts/pr_sha.txt

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            examples/boids-perf-test/benchmark_results/
            examples/boids-perf-test/benchmark_output.txt
            benchmark-artifacts/
