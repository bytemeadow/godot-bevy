name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  GODOT_VERSION: "4.4"

jobs:
  rust:
    name: Build Rust (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extension: .so
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: .dylib
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .dll

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Build workspace (debug)
      run: cargo build --verbose

    - name: Build workspace (release)
      run: cargo build --release --verbose

    - name: Build example project
      run: cargo build --release --manifest-path examples/dodge-the-creeps-2d/rust/Cargo.toml

    - name: Upload Rust artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-libs-${{ matrix.os }}
        path: |
          target/release/*rust${{ matrix.extension }}
          target/release/deps/*rust*${{ matrix.extension }}
        if-no-files-found: error

  godot-export:
    name: Export Godot Project
    runs-on: macos-latest
    needs: rust
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Godot
      uses: CapsCollective/godot-actions/install-godot@v1.2
      with:
        godot-version: ${{ env.GODOT_VERSION }}
        install-templates: true
      id: install-godot

    - name: Download all Rust artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Setup Rust libraries for all platforms
      run: |
        # Create target directories at workspace root (where rust.gdextension expects them)
        mkdir -p target/release target/debug
        
        # Copy Linux libraries
        if [ -d "artifacts/rust-libs-ubuntu-latest" ]; then
          cp artifacts/rust-libs-ubuntu-latest/* target/release/ || true
          cp artifacts/rust-libs-ubuntu-latest/* target/debug/ || true
        fi
        
        # Copy macOS libraries  
        if [ -d "artifacts/rust-libs-macos-latest" ]; then
          cp artifacts/rust-libs-macos-latest/* target/release/ || true
          cp artifacts/rust-libs-macos-latest/* target/debug/ || true
        fi
        
        # Copy Windows libraries
        if [ -d "artifacts/rust-libs-windows-latest" ]; then
          cp artifacts/rust-libs-windows-latest/* target/release/ || true
          cp artifacts/rust-libs-windows-latest/* target/debug/ || true
        fi
        
        echo "Library files available in workspace root:"
        ls -la target/release/ || true
        ls -la target/debug/ || true

    - name: Open Godot editor for reimport
      working-directory: examples/dodge-the-creeps-2d/godot
      run: ${{ steps.install-godot.outputs.godot-executable }} --editor --headless --quit || true

    - name: Build Godot Project for all platforms
      run: |
        cd examples/dodge-the-creeps-2d/godot
        mkdir -p exports
        
        # Export for Linux
        ${{ steps.install-godot.outputs.godot-executable }} --headless --verbose --export-release "Linux/X11" exports/dodge-the-creeps-2d-linux
        
        # Export for Windows
        ${{ steps.install-godot.outputs.godot-executable }} --headless --verbose --export-release "Windows Desktop" exports/dodge-the-creeps-2d-windows.exe
        
        # Export for macOS
        ${{ steps.install-godot.outputs.godot-executable }} --headless --verbose --export-release "macOS" exports/dodge-the-creeps-2d-macos.app

    - name: Upload all exports
      uses: actions/upload-artifact@v4
      with:
        name: godot-exports
        path: examples/dodge-the-creeps-2d/godot/exports/
        if-no-files-found: error

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [rust, godot-export]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 