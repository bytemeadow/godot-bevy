// ðŸ¤– This file is automatically generated by scripts/generate_godot_types.py
// To regenerate: python scripts/generate_godot_types.py

use crate::interop::{GodotNodeHandle, node_markers::*};
use bevy::ecs::system::EntityCommands;

/// Adds appropriate marker components to an entity based on the Godot node type.
/// This function is automatically generated and handles all 200 Godot node types.
///
/// Godot's hierarchy: Node -> {Node3D, CanvasItem -> {Node2D, Control}, Others}
/// We check the major branches: 3D, 2D, Control (UI), and Universal (direct Node children)
pub fn add_comprehensive_node_type_markers(
    entity_commands: &mut EntityCommands,
    node: &mut GodotNodeHandle,
) {
    // All nodes inherit from Node, so add this first
    entity_commands.insert(NodeMarker);

    // Check the major hierarchy branches to minimize FFI calls
    if node.try_get::<godot::classes::Node3D>().is_some() {
        entity_commands.insert(Node3DMarker);
        check_3d_node_types_comprehensive(entity_commands, node);
    } else if node.try_get::<godot::classes::Node2D>().is_some() {
        entity_commands.insert(Node2DMarker);
        entity_commands.insert(CanvasItemMarker); // Node2D inherits from CanvasItem
        check_2d_node_types_comprehensive(entity_commands, node);
    } else if node.try_get::<godot::classes::Control>().is_some() {
        entity_commands.insert(ControlMarker);
        entity_commands.insert(CanvasItemMarker); // Control inherits from CanvasItem
        check_control_node_types_comprehensive(entity_commands, node);
    }

    // Check node types that inherit directly from Node
    check_universal_node_types_comprehensive(entity_commands, node);
}

pub fn remove_comprehensive_node_type_markers(entity_commands: &mut EntityCommands) {
    // All nodes inherit from Node, so remove this first
    entity_commands.remove::<NodeMarker>();

    entity_commands.remove::<Node3DMarker>();
    remove_3d_node_types_comprehensive(entity_commands);

    entity_commands.remove::<Node2DMarker>();
    entity_commands.remove::<CanvasItemMarker>(); // Node2D inherits from CanvasItem
    remove_2d_node_types_comprehensive(entity_commands);

    entity_commands.remove::<ControlMarker>();
    remove_control_node_types_comprehensive(entity_commands);

    remove_universal_node_types_comprehensive(entity_commands);
}

fn check_3d_node_types_comprehensive(
    entity_commands: &mut EntityCommands,
    node: &mut GodotNodeHandle,
) {
    if node.try_get::<godot::classes::AnimatableBody3D>().is_some() {
        entity_commands.insert(AnimatableBody3DMarker);
    }
    if node.try_get::<godot::classes::AnimatedSprite3D>().is_some() {
        entity_commands.insert(AnimatedSprite3DMarker);
    }
    if node.try_get::<godot::classes::Area3D>().is_some() {
        entity_commands.insert(Area3DMarker);
    }
    if node.try_get::<godot::classes::AudioListener3D>().is_some() {
        entity_commands.insert(AudioListener3DMarker);
    }
    if node
        .try_get::<godot::classes::AudioStreamPlayer3D>()
        .is_some()
    {
        entity_commands.insert(AudioStreamPlayer3DMarker);
    }
    if node.try_get::<godot::classes::BoneAttachment3D>().is_some() {
        entity_commands.insert(BoneAttachment3DMarker);
    }
    if node.try_get::<godot::classes::CpuParticles3D>().is_some() {
        entity_commands.insert(CPUParticles3DMarker);
    }
    if node.try_get::<godot::classes::Camera3D>().is_some() {
        entity_commands.insert(Camera3DMarker);
    }
    if node.try_get::<godot::classes::CharacterBody3D>().is_some() {
        entity_commands.insert(CharacterBody3DMarker);
    }
    if node
        .try_get::<godot::classes::CollisionObject3D>()
        .is_some()
    {
        entity_commands.insert(CollisionObject3DMarker);
    }
    if node
        .try_get::<godot::classes::CollisionPolygon3D>()
        .is_some()
    {
        entity_commands.insert(CollisionPolygon3DMarker);
    }
    if node.try_get::<godot::classes::CollisionShape3D>().is_some() {
        entity_commands.insert(CollisionShape3DMarker);
    }
    if node.try_get::<godot::classes::ConeTwistJoint3D>().is_some() {
        entity_commands.insert(ConeTwistJoint3DMarker);
    }
    if node.try_get::<godot::classes::Decal>().is_some() {
        entity_commands.insert(DecalMarker);
    }
    if node
        .try_get::<godot::classes::DirectionalLight3D>()
        .is_some()
    {
        entity_commands.insert(DirectionalLight3DMarker);
    }
    if node.try_get::<godot::classes::GpuParticles3D>().is_some() {
        entity_commands.insert(GPUParticles3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesAttractor3D>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesAttractor3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesAttractorBox3D>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesAttractorBox3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesAttractorSphere3D>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesAttractorSphere3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesAttractorVectorField3D>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesAttractorVectorField3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesCollision3D>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesCollision3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesCollisionBox3D>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesCollisionBox3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesCollisionHeightField3D>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesCollisionHeightField3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesCollisionSdf3d>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesCollisionSDF3DMarker);
    }
    if node
        .try_get::<godot::classes::GpuParticlesCollisionSphere3D>()
        .is_some()
    {
        entity_commands.insert(GPUParticlesCollisionSphere3DMarker);
    }
    if node
        .try_get::<godot::classes::Generic6DofJoint3D>()
        .is_some()
    {
        entity_commands.insert(Generic6DOFJoint3DMarker);
    }
    if node
        .try_get::<godot::classes::GeometryInstance3D>()
        .is_some()
    {
        entity_commands.insert(GeometryInstance3DMarker);
    }
    if node.try_get::<godot::classes::GridMap>().is_some() {
        entity_commands.insert(GridMapMarker);
    }
    if node.try_get::<godot::classes::HingeJoint3D>().is_some() {
        entity_commands.insert(HingeJoint3DMarker);
    }
    if node.try_get::<godot::classes::Joint3D>().is_some() {
        entity_commands.insert(Joint3DMarker);
    }
    if node.try_get::<godot::classes::Label3D>().is_some() {
        entity_commands.insert(Label3DMarker);
    }
    if node.try_get::<godot::classes::Light3D>().is_some() {
        entity_commands.insert(Light3DMarker);
    }
    if node.try_get::<godot::classes::LightmapProbe>().is_some() {
        entity_commands.insert(LightmapProbeMarker);
    }
    if node.try_get::<godot::classes::LookAtModifier3D>().is_some() {
        entity_commands.insert(LookAtModifier3DMarker);
    }
    if node.try_get::<godot::classes::Marker3D>().is_some() {
        entity_commands.insert(Marker3DMarker);
    }
    if node.try_get::<godot::classes::MeshInstance3D>().is_some() {
        entity_commands.insert(MeshInstance3DMarker);
    }
    if node
        .try_get::<godot::classes::MultiMeshInstance3D>()
        .is_some()
    {
        entity_commands.insert(MultiMeshInstance3DMarker);
    }
    if node
        .try_get::<godot::classes::OccluderInstance3D>()
        .is_some()
    {
        entity_commands.insert(OccluderInstance3DMarker);
    }
    if node.try_get::<godot::classes::OmniLight3D>().is_some() {
        entity_commands.insert(OmniLight3DMarker);
    }
    if node.try_get::<godot::classes::Path3D>().is_some() {
        entity_commands.insert(Path3DMarker);
    }
    if node.try_get::<godot::classes::PathFollow3D>().is_some() {
        entity_commands.insert(PathFollow3DMarker);
    }
    if node.try_get::<godot::classes::PhysicalBone3D>().is_some() {
        entity_commands.insert(PhysicalBone3DMarker);
    }
    if node
        .try_get::<godot::classes::PhysicalBoneSimulator3D>()
        .is_some()
    {
        entity_commands.insert(PhysicalBoneSimulator3DMarker);
    }
    if node.try_get::<godot::classes::PhysicsBody3D>().is_some() {
        entity_commands.insert(PhysicsBody3DMarker);
    }
    if node.try_get::<godot::classes::PinJoint3D>().is_some() {
        entity_commands.insert(PinJoint3DMarker);
    }
    if node.try_get::<godot::classes::RayCast3D>().is_some() {
        entity_commands.insert(RayCast3DMarker);
    }
    if node.try_get::<godot::classes::ReflectionProbe>().is_some() {
        entity_commands.insert(ReflectionProbeMarker);
    }
    if node
        .try_get::<godot::classes::RemoteTransform3D>()
        .is_some()
    {
        entity_commands.insert(RemoteTransform3DMarker);
    }
    if node
        .try_get::<godot::classes::RetargetModifier3D>()
        .is_some()
    {
        entity_commands.insert(RetargetModifier3DMarker);
    }
    if node.try_get::<godot::classes::RigidBody3D>().is_some() {
        entity_commands.insert(RigidBody3DMarker);
    }
    if node.try_get::<godot::classes::RootMotionView>().is_some() {
        entity_commands.insert(RootMotionViewMarker);
    }
    if node.try_get::<godot::classes::ShapeCast3D>().is_some() {
        entity_commands.insert(ShapeCast3DMarker);
    }
    if node.try_get::<godot::classes::Skeleton3D>().is_some() {
        entity_commands.insert(Skeleton3DMarker);
    }
    if node.try_get::<godot::classes::SkeletonIk3d>().is_some() {
        entity_commands.insert(SkeletonIK3DMarker);
    }
    if node
        .try_get::<godot::classes::SkeletonModifier3D>()
        .is_some()
    {
        entity_commands.insert(SkeletonModifier3DMarker);
    }
    if node.try_get::<godot::classes::SliderJoint3D>().is_some() {
        entity_commands.insert(SliderJoint3DMarker);
    }
    if node.try_get::<godot::classes::SoftBody3D>().is_some() {
        entity_commands.insert(SoftBody3DMarker);
    }
    if node.try_get::<godot::classes::SpotLight3D>().is_some() {
        entity_commands.insert(SpotLight3DMarker);
    }
    if node.try_get::<godot::classes::SpringArm3D>().is_some() {
        entity_commands.insert(SpringArm3DMarker);
    }
    if node
        .try_get::<godot::classes::SpringBoneCollision3D>()
        .is_some()
    {
        entity_commands.insert(SpringBoneCollision3DMarker);
    }
    if node
        .try_get::<godot::classes::SpringBoneCollisionCapsule3D>()
        .is_some()
    {
        entity_commands.insert(SpringBoneCollisionCapsule3DMarker);
    }
    if node
        .try_get::<godot::classes::SpringBoneCollisionPlane3D>()
        .is_some()
    {
        entity_commands.insert(SpringBoneCollisionPlane3DMarker);
    }
    if node
        .try_get::<godot::classes::SpringBoneCollisionSphere3D>()
        .is_some()
    {
        entity_commands.insert(SpringBoneCollisionSphere3DMarker);
    }
    if node
        .try_get::<godot::classes::SpringBoneSimulator3D>()
        .is_some()
    {
        entity_commands.insert(SpringBoneSimulator3DMarker);
    }
    if node.try_get::<godot::classes::Sprite3D>().is_some() {
        entity_commands.insert(Sprite3DMarker);
    }
    if node.try_get::<godot::classes::SpriteBase3D>().is_some() {
        entity_commands.insert(SpriteBase3DMarker);
    }
    if node.try_get::<godot::classes::StaticBody3D>().is_some() {
        entity_commands.insert(StaticBody3DMarker);
    }
    if node.try_get::<godot::classes::VehicleBody3D>().is_some() {
        entity_commands.insert(VehicleBody3DMarker);
    }
    if node.try_get::<godot::classes::VehicleWheel3D>().is_some() {
        entity_commands.insert(VehicleWheel3DMarker);
    }
    if node
        .try_get::<godot::classes::VisibleOnScreenEnabler3D>()
        .is_some()
    {
        entity_commands.insert(VisibleOnScreenEnabler3DMarker);
    }
    if node
        .try_get::<godot::classes::VisibleOnScreenNotifier3D>()
        .is_some()
    {
        entity_commands.insert(VisibleOnScreenNotifier3DMarker);
    }
    if node.try_get::<godot::classes::VisualInstance3D>().is_some() {
        entity_commands.insert(VisualInstance3DMarker);
    }
}

fn remove_3d_node_types_comprehensive(entity_commands: &mut EntityCommands) {
    entity_commands
        .remove::<AnimatableBody3DMarker>()
        .remove::<AnimatedSprite3DMarker>()
        .remove::<Area3DMarker>()
        .remove::<AudioListener3DMarker>()
        .remove::<AudioStreamPlayer3DMarker>()
        .remove::<BoneAttachment3DMarker>()
        .remove::<CPUParticles3DMarker>()
        .remove::<Camera3DMarker>()
        .remove::<CharacterBody3DMarker>()
        .remove::<CollisionObject3DMarker>()
        .remove::<CollisionPolygon3DMarker>()
        .remove::<CollisionShape3DMarker>()
        .remove::<ConeTwistJoint3DMarker>()
        .remove::<DecalMarker>()
        .remove::<DirectionalLight3DMarker>()
        .remove::<GPUParticles3DMarker>()
        .remove::<GPUParticlesAttractor3DMarker>()
        .remove::<GPUParticlesAttractorBox3DMarker>()
        .remove::<GPUParticlesAttractorSphere3DMarker>()
        .remove::<GPUParticlesAttractorVectorField3DMarker>()
        .remove::<GPUParticlesCollision3DMarker>()
        .remove::<GPUParticlesCollisionBox3DMarker>()
        .remove::<GPUParticlesCollisionHeightField3DMarker>()
        .remove::<GPUParticlesCollisionSDF3DMarker>()
        .remove::<GPUParticlesCollisionSphere3DMarker>()
        .remove::<Generic6DOFJoint3DMarker>()
        .remove::<GeometryInstance3DMarker>()
        .remove::<GridMapMarker>()
        .remove::<HingeJoint3DMarker>()
        .remove::<Joint3DMarker>()
        .remove::<Label3DMarker>()
        .remove::<Light3DMarker>()
        .remove::<LightmapProbeMarker>()
        .remove::<LookAtModifier3DMarker>()
        .remove::<Marker3DMarker>()
        .remove::<MeshInstance3DMarker>()
        .remove::<MultiMeshInstance3DMarker>()
        .remove::<OccluderInstance3DMarker>()
        .remove::<OmniLight3DMarker>()
        .remove::<Path3DMarker>()
        .remove::<PathFollow3DMarker>()
        .remove::<PhysicalBone3DMarker>()
        .remove::<PhysicalBoneSimulator3DMarker>()
        .remove::<PhysicsBody3DMarker>()
        .remove::<PinJoint3DMarker>()
        .remove::<RayCast3DMarker>()
        .remove::<ReflectionProbeMarker>()
        .remove::<RemoteTransform3DMarker>()
        .remove::<RetargetModifier3DMarker>()
        .remove::<RigidBody3DMarker>()
        .remove::<RootMotionViewMarker>()
        .remove::<ShapeCast3DMarker>()
        .remove::<Skeleton3DMarker>()
        .remove::<SkeletonIK3DMarker>()
        .remove::<SkeletonModifier3DMarker>()
        .remove::<SliderJoint3DMarker>()
        .remove::<SoftBody3DMarker>()
        .remove::<SpotLight3DMarker>()
        .remove::<SpringArm3DMarker>()
        .remove::<SpringBoneCollision3DMarker>()
        .remove::<SpringBoneCollisionCapsule3DMarker>()
        .remove::<SpringBoneCollisionPlane3DMarker>()
        .remove::<SpringBoneCollisionSphere3DMarker>()
        .remove::<SpringBoneSimulator3DMarker>()
        .remove::<Sprite3DMarker>()
        .remove::<SpriteBase3DMarker>()
        .remove::<StaticBody3DMarker>()
        .remove::<VehicleBody3DMarker>()
        .remove::<VehicleWheel3DMarker>()
        .remove::<VisibleOnScreenEnabler3DMarker>()
        .remove::<VisibleOnScreenNotifier3DMarker>()
        .remove::<VisualInstance3DMarker>();
}

fn check_2d_node_types_comprehensive(
    entity_commands: &mut EntityCommands,
    node: &mut GodotNodeHandle,
) {
    if node.try_get::<godot::classes::AnimatableBody2D>().is_some() {
        entity_commands.insert(AnimatableBody2DMarker);
    }
    if node.try_get::<godot::classes::AnimatedSprite2D>().is_some() {
        entity_commands.insert(AnimatedSprite2DMarker);
    }
    if node.try_get::<godot::classes::Area2D>().is_some() {
        entity_commands.insert(Area2DMarker);
    }
    if node.try_get::<godot::classes::AudioListener2D>().is_some() {
        entity_commands.insert(AudioListener2DMarker);
    }
    if node
        .try_get::<godot::classes::AudioStreamPlayer2D>()
        .is_some()
    {
        entity_commands.insert(AudioStreamPlayer2DMarker);
    }
    if node.try_get::<godot::classes::BackBufferCopy>().is_some() {
        entity_commands.insert(BackBufferCopyMarker);
    }
    if node.try_get::<godot::classes::Bone2D>().is_some() {
        entity_commands.insert(Bone2DMarker);
    }
    if node.try_get::<godot::classes::CpuParticles2D>().is_some() {
        entity_commands.insert(CPUParticles2DMarker);
    }
    if node.try_get::<godot::classes::Camera2D>().is_some() {
        entity_commands.insert(Camera2DMarker);
    }
    if node.try_get::<godot::classes::CanvasGroup>().is_some() {
        entity_commands.insert(CanvasGroupMarker);
    }
    if node.try_get::<godot::classes::CanvasModulate>().is_some() {
        entity_commands.insert(CanvasModulateMarker);
    }
    if node.try_get::<godot::classes::CharacterBody2D>().is_some() {
        entity_commands.insert(CharacterBody2DMarker);
    }
    if node
        .try_get::<godot::classes::CollisionObject2D>()
        .is_some()
    {
        entity_commands.insert(CollisionObject2DMarker);
    }
    if node
        .try_get::<godot::classes::CollisionPolygon2D>()
        .is_some()
    {
        entity_commands.insert(CollisionPolygon2DMarker);
    }
    if node.try_get::<godot::classes::CollisionShape2D>().is_some() {
        entity_commands.insert(CollisionShape2DMarker);
    }
    if node
        .try_get::<godot::classes::DampedSpringJoint2D>()
        .is_some()
    {
        entity_commands.insert(DampedSpringJoint2DMarker);
    }
    if node
        .try_get::<godot::classes::DirectionalLight2D>()
        .is_some()
    {
        entity_commands.insert(DirectionalLight2DMarker);
    }
    if node.try_get::<godot::classes::GpuParticles2D>().is_some() {
        entity_commands.insert(GPUParticles2DMarker);
    }
    if node.try_get::<godot::classes::GrooveJoint2D>().is_some() {
        entity_commands.insert(GrooveJoint2DMarker);
    }
    if node.try_get::<godot::classes::Joint2D>().is_some() {
        entity_commands.insert(Joint2DMarker);
    }
    if node.try_get::<godot::classes::Light2D>().is_some() {
        entity_commands.insert(Light2DMarker);
    }
    if node.try_get::<godot::classes::LightOccluder2D>().is_some() {
        entity_commands.insert(LightOccluder2DMarker);
    }
    if node.try_get::<godot::classes::Line2D>().is_some() {
        entity_commands.insert(Line2DMarker);
    }
    if node.try_get::<godot::classes::Marker2D>().is_some() {
        entity_commands.insert(Marker2DMarker);
    }
    if node.try_get::<godot::classes::MeshInstance2D>().is_some() {
        entity_commands.insert(MeshInstance2DMarker);
    }
    if node
        .try_get::<godot::classes::MultiMeshInstance2D>()
        .is_some()
    {
        entity_commands.insert(MultiMeshInstance2DMarker);
    }
    if node.try_get::<godot::classes::ParallaxLayer>().is_some() {
        entity_commands.insert(ParallaxLayerMarker);
    }
    if node.try_get::<godot::classes::Path2D>().is_some() {
        entity_commands.insert(Path2DMarker);
    }
    if node.try_get::<godot::classes::PathFollow2D>().is_some() {
        entity_commands.insert(PathFollow2DMarker);
    }
    if node.try_get::<godot::classes::PhysicalBone2D>().is_some() {
        entity_commands.insert(PhysicalBone2DMarker);
    }
    if node.try_get::<godot::classes::PhysicsBody2D>().is_some() {
        entity_commands.insert(PhysicsBody2DMarker);
    }
    if node.try_get::<godot::classes::PinJoint2D>().is_some() {
        entity_commands.insert(PinJoint2DMarker);
    }
    if node.try_get::<godot::classes::PointLight2D>().is_some() {
        entity_commands.insert(PointLight2DMarker);
    }
    if node.try_get::<godot::classes::Polygon2D>().is_some() {
        entity_commands.insert(Polygon2DMarker);
    }
    if node.try_get::<godot::classes::RayCast2D>().is_some() {
        entity_commands.insert(RayCast2DMarker);
    }
    if node
        .try_get::<godot::classes::RemoteTransform2D>()
        .is_some()
    {
        entity_commands.insert(RemoteTransform2DMarker);
    }
    if node.try_get::<godot::classes::RigidBody2D>().is_some() {
        entity_commands.insert(RigidBody2DMarker);
    }
    if node.try_get::<godot::classes::ShapeCast2D>().is_some() {
        entity_commands.insert(ShapeCast2DMarker);
    }
    if node.try_get::<godot::classes::Skeleton2D>().is_some() {
        entity_commands.insert(Skeleton2DMarker);
    }
    if node.try_get::<godot::classes::Sprite2D>().is_some() {
        entity_commands.insert(Sprite2DMarker);
    }
    if node.try_get::<godot::classes::StaticBody2D>().is_some() {
        entity_commands.insert(StaticBody2DMarker);
    }
    if node.try_get::<godot::classes::TileMap>().is_some() {
        entity_commands.insert(TileMapMarker);
    }
    if node.try_get::<godot::classes::TileMapLayer>().is_some() {
        entity_commands.insert(TileMapLayerMarker);
    }
    if node
        .try_get::<godot::classes::TouchScreenButton>()
        .is_some()
    {
        entity_commands.insert(TouchScreenButtonMarker);
    }
    if node
        .try_get::<godot::classes::VisibleOnScreenEnabler2D>()
        .is_some()
    {
        entity_commands.insert(VisibleOnScreenEnabler2DMarker);
    }
    if node
        .try_get::<godot::classes::VisibleOnScreenNotifier2D>()
        .is_some()
    {
        entity_commands.insert(VisibleOnScreenNotifier2DMarker);
    }
}

fn remove_2d_node_types_comprehensive(entity_commands: &mut EntityCommands) {
    entity_commands
        .remove::<AnimatableBody2DMarker>()
        .remove::<AnimatedSprite2DMarker>()
        .remove::<Area2DMarker>()
        .remove::<AudioListener2DMarker>()
        .remove::<AudioStreamPlayer2DMarker>()
        .remove::<BackBufferCopyMarker>()
        .remove::<Bone2DMarker>()
        .remove::<CPUParticles2DMarker>()
        .remove::<Camera2DMarker>()
        .remove::<CanvasGroupMarker>()
        .remove::<CanvasModulateMarker>()
        .remove::<CharacterBody2DMarker>()
        .remove::<CollisionObject2DMarker>()
        .remove::<CollisionPolygon2DMarker>()
        .remove::<CollisionShape2DMarker>()
        .remove::<DampedSpringJoint2DMarker>()
        .remove::<DirectionalLight2DMarker>()
        .remove::<GPUParticles2DMarker>()
        .remove::<GrooveJoint2DMarker>()
        .remove::<Joint2DMarker>()
        .remove::<Light2DMarker>()
        .remove::<LightOccluder2DMarker>()
        .remove::<Line2DMarker>()
        .remove::<Marker2DMarker>()
        .remove::<MeshInstance2DMarker>()
        .remove::<MultiMeshInstance2DMarker>()
        .remove::<ParallaxLayerMarker>()
        .remove::<Path2DMarker>()
        .remove::<PathFollow2DMarker>()
        .remove::<PhysicalBone2DMarker>()
        .remove::<PhysicsBody2DMarker>()
        .remove::<PinJoint2DMarker>()
        .remove::<PointLight2DMarker>()
        .remove::<Polygon2DMarker>()
        .remove::<RayCast2DMarker>()
        .remove::<RemoteTransform2DMarker>()
        .remove::<RigidBody2DMarker>()
        .remove::<ShapeCast2DMarker>()
        .remove::<Skeleton2DMarker>()
        .remove::<Sprite2DMarker>()
        .remove::<StaticBody2DMarker>()
        .remove::<TileMapMarker>()
        .remove::<TileMapLayerMarker>()
        .remove::<TouchScreenButtonMarker>()
        .remove::<VisibleOnScreenEnabler2DMarker>()
        .remove::<VisibleOnScreenNotifier2DMarker>();
}

fn check_control_node_types_comprehensive(
    entity_commands: &mut EntityCommands,
    node: &mut GodotNodeHandle,
) {
    if node
        .try_get::<godot::classes::AspectRatioContainer>()
        .is_some()
    {
        entity_commands.insert(AspectRatioContainerMarker);
    }
    if node.try_get::<godot::classes::BaseButton>().is_some() {
        entity_commands.insert(BaseButtonMarker);
    }
    if node.try_get::<godot::classes::BoxContainer>().is_some() {
        entity_commands.insert(BoxContainerMarker);
    }
    if node.try_get::<godot::classes::Button>().is_some() {
        entity_commands.insert(ButtonMarker);
    }
    if node.try_get::<godot::classes::CenterContainer>().is_some() {
        entity_commands.insert(CenterContainerMarker);
    }
    if node.try_get::<godot::classes::CheckBox>().is_some() {
        entity_commands.insert(CheckBoxMarker);
    }
    if node.try_get::<godot::classes::CheckButton>().is_some() {
        entity_commands.insert(CheckButtonMarker);
    }
    if node.try_get::<godot::classes::CodeEdit>().is_some() {
        entity_commands.insert(CodeEditMarker);
    }
    if node.try_get::<godot::classes::ColorPicker>().is_some() {
        entity_commands.insert(ColorPickerMarker);
    }
    if node
        .try_get::<godot::classes::ColorPickerButton>()
        .is_some()
    {
        entity_commands.insert(ColorPickerButtonMarker);
    }
    if node.try_get::<godot::classes::ColorRect>().is_some() {
        entity_commands.insert(ColorRectMarker);
    }
    if node.try_get::<godot::classes::Container>().is_some() {
        entity_commands.insert(ContainerMarker);
    }
    if node.try_get::<godot::classes::FlowContainer>().is_some() {
        entity_commands.insert(FlowContainerMarker);
    }
    if node.try_get::<godot::classes::GridContainer>().is_some() {
        entity_commands.insert(GridContainerMarker);
    }
    if node.try_get::<godot::classes::HBoxContainer>().is_some() {
        entity_commands.insert(HBoxContainerMarker);
    }
    if node.try_get::<godot::classes::HFlowContainer>().is_some() {
        entity_commands.insert(HFlowContainerMarker);
    }
    if node.try_get::<godot::classes::HScrollBar>().is_some() {
        entity_commands.insert(HScrollBarMarker);
    }
    if node.try_get::<godot::classes::HSeparator>().is_some() {
        entity_commands.insert(HSeparatorMarker);
    }
    if node.try_get::<godot::classes::HSlider>().is_some() {
        entity_commands.insert(HSliderMarker);
    }
    if node.try_get::<godot::classes::HSplitContainer>().is_some() {
        entity_commands.insert(HSplitContainerMarker);
    }
    if node.try_get::<godot::classes::ItemList>().is_some() {
        entity_commands.insert(ItemListMarker);
    }
    if node.try_get::<godot::classes::Label>().is_some() {
        entity_commands.insert(LabelMarker);
    }
    if node.try_get::<godot::classes::LineEdit>().is_some() {
        entity_commands.insert(LineEditMarker);
    }
    if node.try_get::<godot::classes::LinkButton>().is_some() {
        entity_commands.insert(LinkButtonMarker);
    }
    if node.try_get::<godot::classes::MarginContainer>().is_some() {
        entity_commands.insert(MarginContainerMarker);
    }
    if node.try_get::<godot::classes::MenuBar>().is_some() {
        entity_commands.insert(MenuBarMarker);
    }
    if node.try_get::<godot::classes::MenuButton>().is_some() {
        entity_commands.insert(MenuButtonMarker);
    }
    if node.try_get::<godot::classes::NinePatchRect>().is_some() {
        entity_commands.insert(NinePatchRectMarker);
    }
    if node.try_get::<godot::classes::OptionButton>().is_some() {
        entity_commands.insert(OptionButtonMarker);
    }
    if node.try_get::<godot::classes::Panel>().is_some() {
        entity_commands.insert(PanelMarker);
    }
    if node.try_get::<godot::classes::PanelContainer>().is_some() {
        entity_commands.insert(PanelContainerMarker);
    }
    if node.try_get::<godot::classes::ProgressBar>().is_some() {
        entity_commands.insert(ProgressBarMarker);
    }
    if node.try_get::<godot::classes::Range>().is_some() {
        entity_commands.insert(RangeMarker);
    }
    if node.try_get::<godot::classes::ReferenceRect>().is_some() {
        entity_commands.insert(ReferenceRectMarker);
    }
    if node.try_get::<godot::classes::RichTextLabel>().is_some() {
        entity_commands.insert(RichTextLabelMarker);
    }
    if node.try_get::<godot::classes::ScrollBar>().is_some() {
        entity_commands.insert(ScrollBarMarker);
    }
    if node.try_get::<godot::classes::ScrollContainer>().is_some() {
        entity_commands.insert(ScrollContainerMarker);
    }
    if node.try_get::<godot::classes::Separator>().is_some() {
        entity_commands.insert(SeparatorMarker);
    }
    if node.try_get::<godot::classes::Slider>().is_some() {
        entity_commands.insert(SliderMarker);
    }
    if node.try_get::<godot::classes::SpinBox>().is_some() {
        entity_commands.insert(SpinBoxMarker);
    }
    if node.try_get::<godot::classes::SplitContainer>().is_some() {
        entity_commands.insert(SplitContainerMarker);
    }
    if node
        .try_get::<godot::classes::SubViewportContainer>()
        .is_some()
    {
        entity_commands.insert(SubViewportContainerMarker);
    }
    if node.try_get::<godot::classes::TabBar>().is_some() {
        entity_commands.insert(TabBarMarker);
    }
    if node.try_get::<godot::classes::TabContainer>().is_some() {
        entity_commands.insert(TabContainerMarker);
    }
    if node.try_get::<godot::classes::TextEdit>().is_some() {
        entity_commands.insert(TextEditMarker);
    }
    if node.try_get::<godot::classes::TextureButton>().is_some() {
        entity_commands.insert(TextureButtonMarker);
    }
    if node
        .try_get::<godot::classes::TextureProgressBar>()
        .is_some()
    {
        entity_commands.insert(TextureProgressBarMarker);
    }
    if node.try_get::<godot::classes::TextureRect>().is_some() {
        entity_commands.insert(TextureRectMarker);
    }
    if node.try_get::<godot::classes::Tree>().is_some() {
        entity_commands.insert(TreeMarker);
    }
    if node.try_get::<godot::classes::VBoxContainer>().is_some() {
        entity_commands.insert(VBoxContainerMarker);
    }
    if node.try_get::<godot::classes::VFlowContainer>().is_some() {
        entity_commands.insert(VFlowContainerMarker);
    }
    if node.try_get::<godot::classes::VScrollBar>().is_some() {
        entity_commands.insert(VScrollBarMarker);
    }
    if node.try_get::<godot::classes::VSeparator>().is_some() {
        entity_commands.insert(VSeparatorMarker);
    }
    if node.try_get::<godot::classes::VSlider>().is_some() {
        entity_commands.insert(VSliderMarker);
    }
    if node.try_get::<godot::classes::VSplitContainer>().is_some() {
        entity_commands.insert(VSplitContainerMarker);
    }
    if node
        .try_get::<godot::classes::VideoStreamPlayer>()
        .is_some()
    {
        entity_commands.insert(VideoStreamPlayerMarker);
    }
}

fn remove_control_node_types_comprehensive(entity_commands: &mut EntityCommands) {
    entity_commands
        .remove::<AspectRatioContainerMarker>()
        .remove::<BaseButtonMarker>()
        .remove::<BoxContainerMarker>()
        .remove::<ButtonMarker>()
        .remove::<CenterContainerMarker>()
        .remove::<CheckBoxMarker>()
        .remove::<CheckButtonMarker>()
        .remove::<CodeEditMarker>()
        .remove::<ColorPickerMarker>()
        .remove::<ColorPickerButtonMarker>()
        .remove::<ColorRectMarker>()
        .remove::<ContainerMarker>()
        .remove::<FlowContainerMarker>()
        .remove::<GridContainerMarker>()
        .remove::<HBoxContainerMarker>()
        .remove::<HFlowContainerMarker>()
        .remove::<HScrollBarMarker>()
        .remove::<HSeparatorMarker>()
        .remove::<HSliderMarker>()
        .remove::<HSplitContainerMarker>()
        .remove::<ItemListMarker>()
        .remove::<LabelMarker>()
        .remove::<LineEditMarker>()
        .remove::<LinkButtonMarker>()
        .remove::<MarginContainerMarker>()
        .remove::<MenuBarMarker>()
        .remove::<MenuButtonMarker>()
        .remove::<NinePatchRectMarker>()
        .remove::<OptionButtonMarker>()
        .remove::<PanelMarker>()
        .remove::<PanelContainerMarker>()
        .remove::<ProgressBarMarker>()
        .remove::<RangeMarker>()
        .remove::<ReferenceRectMarker>()
        .remove::<RichTextLabelMarker>()
        .remove::<ScrollBarMarker>()
        .remove::<ScrollContainerMarker>()
        .remove::<SeparatorMarker>()
        .remove::<SliderMarker>()
        .remove::<SpinBoxMarker>()
        .remove::<SplitContainerMarker>()
        .remove::<SubViewportContainerMarker>()
        .remove::<TabBarMarker>()
        .remove::<TabContainerMarker>()
        .remove::<TextEditMarker>()
        .remove::<TextureButtonMarker>()
        .remove::<TextureProgressBarMarker>()
        .remove::<TextureRectMarker>()
        .remove::<TreeMarker>()
        .remove::<VBoxContainerMarker>()
        .remove::<VFlowContainerMarker>()
        .remove::<VScrollBarMarker>()
        .remove::<VSeparatorMarker>()
        .remove::<VSliderMarker>()
        .remove::<VSplitContainerMarker>()
        .remove::<VideoStreamPlayerMarker>();
}

fn check_universal_node_types_comprehensive(
    entity_commands: &mut EntityCommands,
    node: &mut GodotNodeHandle,
) {
    if node.try_get::<godot::classes::AnimationMixer>().is_some() {
        entity_commands.insert(AnimationMixerMarker);
    }
    if node
        .try_get::<godot::classes::AudioStreamPlayer>()
        .is_some()
    {
        entity_commands.insert(AudioStreamPlayerMarker);
    }
    if node.try_get::<godot::classes::CanvasItem>().is_some() {
        entity_commands.insert(CanvasItemMarker);
    }
    if node.try_get::<godot::classes::CanvasLayer>().is_some() {
        entity_commands.insert(CanvasLayerMarker);
    }
    if node.try_get::<godot::classes::HttpRequest>().is_some() {
        entity_commands.insert(HTTPRequestMarker);
    }
    if node
        .try_get::<godot::classes::InstancePlaceholder>()
        .is_some()
    {
        entity_commands.insert(InstancePlaceholderMarker);
    }
    if node
        .try_get::<godot::classes::MultiplayerSpawner>()
        .is_some()
    {
        entity_commands.insert(MultiplayerSpawnerMarker);
    }
    if node
        .try_get::<godot::classes::MultiplayerSynchronizer>()
        .is_some()
    {
        entity_commands.insert(MultiplayerSynchronizerMarker);
    }
    if node.try_get::<godot::classes::Node3D>().is_some() {
        entity_commands.insert(Node3DMarker);
    }
    if node
        .try_get::<godot::classes::ResourcePreloader>()
        .is_some()
    {
        entity_commands.insert(ResourcePreloaderMarker);
    }
    if node
        .try_get::<godot::classes::ShaderGlobalsOverride>()
        .is_some()
    {
        entity_commands.insert(ShaderGlobalsOverrideMarker);
    }
    if node.try_get::<godot::classes::Timer>().is_some() {
        entity_commands.insert(TimerMarker);
    }
    if node.try_get::<godot::classes::Viewport>().is_some() {
        entity_commands.insert(ViewportMarker);
    }
}
fn remove_universal_node_types_comprehensive(entity_commands: &mut EntityCommands) {
    entity_commands
        .remove::<AnimationMixerMarker>()
        .remove::<AudioStreamPlayerMarker>()
        .remove::<CanvasItemMarker>()
        .remove::<CanvasLayerMarker>()
        .remove::<HTTPRequestMarker>()
        .remove::<InstancePlaceholderMarker>()
        .remove::<MultiplayerSpawnerMarker>()
        .remove::<MultiplayerSynchronizerMarker>()
        .remove::<Node3DMarker>()
        .remove::<ResourcePreloaderMarker>()
        .remove::<ShaderGlobalsOverrideMarker>()
        .remove::<TimerMarker>()
        .remove::<ViewportMarker>();
}
